<apex:page docType="html-5.0" standardStylesheets="false" showHeader="false" sidebar="false">
<c:RemoteTK />
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" /> 
  <title>Accounts in Backbone.js</title>

  <!-- ========= -->
  <!--    CSS    -->
  <!-- ========= -->
  <link href="{!URLFOR($Resource.resources, 'css/jquery.mobile-1.3.0.min.css')}" rel="stylesheet" />

  <!-- ========= -->
  <!-- Libraries -->
  <!-- ========= -->
  <script src="{!URLFOR($Resource.resources, 'lib/jquery.js')}" type="text/javascript"></script>
  <script src="{!URLFOR($Resource.resources, 'lib/lodash.js')}" type="text/javascript"></script>
  <script src="{!URLFOR($Resource.resources, 'lib/backbone.js')}" type="text/javascript"></script>
  <script src="{!URLFOR($Resource.resources, 'lib/forcetk.js')}" type="text/javascript"></script>
  <script src="{!URLFOR($Resource.resources, 'lib/backbone.force.js')}" type="text/javascript"></script>
  <script>
    $( document ).on( "mobileinit",
      // Set up the "mobileinit" handler before including jQuery Mobile
      function() {
        $.mobile.ajaxEnabled = false;
        $.mobile.linkBindingEnabled = false;
        // $.mobile.hashListeningEnabled = false;
        // $.mobile.pushStateEnabled = false;
        // $.mobile.changePage.defaults.changeHash = false;
      }
    )
  </script>
  <script src="{!URLFOR($Resource.resources, 'lib/jquerymobile.js')}" type="text/javascript"></script>
</head>
<body>

  <!-- ========= -->
  <!-- HTML CODE -->
  <!-- ========= -->
  <div id="accounts" data-role="page" data-title="Accounts">
    <div data-role="header">
      <h1>Accounts</h1>
    </div><!-- /header -->
    <div data-role="content" id="accounts-content">
    </div>
  </div>

  <div id="account" data-role="page" data-title="Account">
    <div data-role="header">
      <h1>Account</h1>
    </div><!-- /header -->
    <div data-role="content" id="account-content">
    </div>
  </div>

  <!-- ========= -->
  <!-- Templates -->
  <!-- ========= -->
  <script type="text/template" id="accounts-template">
    <form>
        <button data-role="button" class="new">New Account</button>
    </form>
    <ul data-role="listview" data-inset="true" id="account-list">
    </ul>
    <div data-role="footer">
      <div data-role="fieldcontain">
        <label for="select-theme" class="select">UI Theme:</label>
        <select class="theme-selector" name="select-theme" id="select-theme">
          <option value="default">default</option>
          <option value="a">a</option>
          <option value="b">b</option>
          <option value="c">c</option>
          <option value="d">d</option>
          <option value="e">e</option>
        </select>
      </div>
    </div>
  </script>

  <script type="text/template" id="account-template">
    <% if (typeof(Id) !== 'undefined') { %>
      <a href="#<%= Id %>"><%- Name %></a> 
    <% } else { %>
      <%- Name %>
    <% } %>
  </script>

  <script type="text/template" id="account-detail-template">
    <form name="accountform" id="accountform">
      <% if (typeof(Id) !== 'undefined') { %>
        <input type="hidden" name="Id" id="Id" value="<%- Id %>" />
      <% } %>
      <div data-role="fieldcontain">
        <label for="Name">Account Name:</label>
        <% if (typeof(Name) !== 'undefined') { %>
          <input name="Name" id="Name" value="<%- Name %>" />
        <% } else { %>
          <input name="Name" id="Name" />
        <% } %>
      </div>
      <div data-role="fieldcontain">
        <label for="Industry">Industry:</label>
        <% if (typeof(Industry) !== 'undefined') { %>
          <input name="Industry" id="Industry" value="<%- Industry %>" />
        <% } else { %>
          <input name="Industry" id="Industry" />
        <% } %>
      </div>
      <button data-role="button" data-icon="check" data-inline="true" data-theme="b" class="save">Save</button>
      <% if (typeof(Id) !== 'undefined') { %>
        <button data-role="button" data-icon="delete" data-inline="true" class="destroy">Delete</button>
      <% } %>
    </form>
  </script>

  <!-- =============== -->
  <!-- Javascript code -->
  <!-- =============== -->
  <script type="text/javascript">
    var client = new remotetk.Client();

    function changeTheme(theme){
      var hfTheme = theme, 
          cTheme = theme;

      if (theme === 'default') {
        // "If no theme swatch letter is set at all, the framework uses the 
        // "a" swatch (black in the default theme) for headers and footers 
        // and the "c" swatch (light gray in the default theme) for the page 
        // content to maximize contrast between the both."
        // http://jquerymobile.com/demos/1.2.1/docs/api/themes.html
        hfTheme = "a";
        cTheme = "c";
      }

      $.mobile.activePage.find('.ui-btn').not('.ui-li-divider')
                         .removeClass('ui-btn-up-a ui-btn-up-b ui-btn-up-c ui-btn-up-d ui-btn-up-e ui-btn-hover-a ui-btn-hover-b ui-btn-hover-c ui-btn-hover-d ui-btn-hover-e')
                         .addClass('ui-btn-up-' + cTheme)
                         .attr('data-theme', cTheme);
      
      $.mobile.activePage.find('.ui-li-divider').each(function (index, obj) {
        if ($(this).parent().attr('data-divider-theme') == 'undefined') {
            $(this).removeClass('ui-bar-a ui-bar-b ui-bar-c ui-bar-d ui-bar-e')
                   .addClass('ui-bar-' + cTheme)
                   .attr('data-theme', cTheme);
        }
      })
                         
      $.mobile.activePage.find('.ui-header, .ui-footer')
                         .removeClass('ui-bar-a ui-bar-b ui-bar-c ui-bar-d ui-bar-e')
                         .addClass('ui-bar-' + hfTheme)
                         .attr('data-theme', hfTheme);
      $.mobile.activePage.removeClass('ui-body-a ui-body-b ui-body-c ui-body-d ui-body-e')
                         .addClass('ui-body-' + cTheme)
                         .attr('data-theme', cTheme);
    }

    $(document).ready(function() {
      myapp();
    });

    function myapp() {
      Backbone.Force.initialize(client);

      var app = {}; // create namespace for our app

      //--------------
      // Models
      //--------------
      app.Account = Backbone.Force.Model.extend({
        type:'Account',
        fields:['Id', 'Name', 'Industry']
      });

      //--------------
      // Collections
      //--------------
      app.AccountsCollection = Backbone.Force.Collection.extend({
        model: app.Account,
        query: "WHERE IsDeleted = false"
      }),

      //--------------
      // Views
      //--------------

      // renders individual Account list item (li)
      app.AccountView = Backbone.View.extend({
        tagName: 'li',
        template: _.template($('#account-template').html()),
        render: function(){
          this.$el.html(this.template(this.model.toJSON()));
          return this; // enable chained calls
        },
        initialize: function(){
        }
      });

      // renders individual Account for editing
      app.AccountDetailView = Backbone.View.extend({
        template: _.template($('#account-detail-template').html()),
        render: function(){
          this.$el.html(this.template(this.model.toJSON()));
          return this; // enable chained calls
        },
        initialize: function(){
          this.model.on('destroy', this.remove, this);
          this.render();
        },
        events: {
          'change' : 'change',
          'click .save' : 'save',
          'click .destroy': 'destroy'
        },
        change: function (event) {
            // Apply the change to the model
            var target = event.target;
            var change = {};
            change[target.name] = target.value;
            this.model.set(change);
        },
        save: function(){
          this.model.save(null, {
            success: function(model) {
              app.router.navigate('accounts', true);
            },
            error: function () {
              alert('Error saving');
            }
          });
          return false;
        },
        destroy: function(){
          this.model.destroy({
            success: function() {
              app.router.navigate('accounts', true);              
            },
              error: function () {
                alert('Error deleting');
              }
          });
          return false;
        }
      });

      // renders the full list of Accounts calling AccountView for each one.
      app.AccountsView = Backbone.View.extend({
        template: _.template($('#accounts-template').html()),
        initialize: function() {
          this.render();
          this.input = this.$('#new-account');
          this.model.on('add', this.render, this);
          this.model.on('reset', this.render, this);
        },
        events: {
          'click .new' : 'newAccount',
          'change .theme-selector' : 'changeTheme'
        },
        createAccountOnEnter: function(e){
          if ( e.which !== 13 || !this.input.val().trim() ) { // ENTER_KEY = 13
            return;
          }
          // Wait for the server response so we have the Id with which to render 
          // the new Account
          this.model.create(this.newAttributes(), {wait: true});
          this.input.val(''); // clean input box
        },
        renderOne: function(account){
          var view = new app.AccountView({model: account});
          this.$('#account-list').append(view.render().el);
        },
        render: function(){
          this.$el.html(this.template());
          this.$('#account-list').empty();
          for (var i = 0, l = this.model.models.length; i < l; i++) {
            this.renderOne(this.model.models[i]);
          }
        },
        newAttributes: function(){
          return {
            Name: this.input.val().trim()
          }
        },
        changeTheme: function(event){
          event.preventDefault();
          
          var theme = $(event.target).children("option").filter(":selected").text();

          changeTheme(theme);
        },
        newAccount: function(){
          app.router.navigate('/new', true);
          return false;
        }
      });

      //Define the Application Router
      app.Router = Backbone.Router.extend({ 
        routes: {
          "": "accounts",
          "new": "newAccount",
          ":id": "account"
        },          
        accounts: function() {
          var accountsCollection = new app.AccountsCollection();
          $.mobile.loading( "show", { text: 'Loading Accounts', textVisible: true } );
          accountsCollection.fetch({success: function(){
            $.mobile.loading( "hide" );
            $("#accounts-content").html(new app.AccountsView({model: accountsCollection}).el);
            // Let jQuery Mobile do its stuff
            $("#accounts-content").trigger( 'create' );
            $.mobile.changePage( "#accounts" , { reverse: false, changeHash: false } );
          }});
        },
        account: function(id) {
          var account = new app.Account({Id: id});
          $.mobile.loading( "show", { text: 'Loading Account', textVisible: true } );
          account.fetch({success: function(){
            $.mobile.loading( "hide" );
            $("#account-content").html(new app.AccountDetailView({model: account}).el);
            $("#account-content").trigger( 'create' );
            $.mobile.changePage( "#account" , { reverse: false, changeHash: false } );
          }});
        },
        newAccount: function(id) {
          var account = new app.Account();
          $("#account-content").empty();
          $("#account-content").html(new app.AccountDetailView({model: account}).el);
          $("#account-content").trigger( 'create' );
          $.mobile.changePage( "#account" , { reverse: false, changeHash: false } );
        }
      });

      app.router = new app.Router();
      Backbone.history.start();
    }
  </script>

</body>
</apex:page>